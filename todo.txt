Notice when wikiTab or GoogleTab closes
Strip leading and trailing white space on each line of text to check

✓ Use Session.get("nativeCode") in wiktionary call
Open Google Translate behind other tabs

✓ Define native language and target language
Use tld as a fallback if lang is not defined

Use custom CSS to hide parts of the page in order to focus on the main bits.

Tutorial:
Refine CSS for printing the page so that images are not broken between pages and sections start on a new page.

Deal elegantly with the situation where the Meteor server is not available.

Click on X close icon jumps to #close section

Remind readers to rebuild the extension and reload it.

Save "Show annotations" status in background.js
Remember Active and Annotate status per site (per URL)

Show progress bar while frequencyData is loading

Refine RegExp
- Include words like "I'll" as complete words
✓ Consider numbers as level 0

Create profile sets for learners, following Oxford (and other) word lists for beginners
- Words at different levels are tagged in the database
- A request to the database includes a reference to the corpus
- The user can set a starting level locally: all words at that level and lower will appear black

✓ Words within tags (<span> or <a>, or whatever) don't have spaces after the end of the original span in the annotated version. (Visible on http://lx/openbook/annotations/#connection)

Track changes to DOM in real time, and annotate the changes as they occur.

TEXT
- Image of completed extension, for section 1
- Link to install extension in section 1
- Create image showing interaction between various extension components, and add it to section 3 
- End of section 5: link to section which deals with the tab id of the popup window.
- Add reference to Neo4j in section 6?

JS
✓ Remember scrollTop when navigating away from a page; restore scrollTop when returning to that page.

CSS
<printing>
- Place "last" page at the beginning
- Number sections
- Avoid splitting images on page breaks
- Hide sidebar if page is too narrow
<encapsulation>
- Ensure CSS for Toolbar is independent on CSS for page

MISC
- Zoom scaled-down images to full size when clicked
- Find text in all sections
- Display as single page
- Restore display for active tab when switching tabs
- Add "Lock" button to prevent automatically updating on tab switch

TESTING
- Check that Tip disclosure triangles work correctly now in all major browsers
✓ Is inject.css added multiple times?
- What happens to the Toolbar and extensionIsActive when you navigate to a different page within the same tab?

POPUP WINDOW
- Menu
  - Open
  - Close
  - Show original | annotations
  - Register / Log in
  - Log out
  - Manage automatic activation
    - Specific languages
    - Specific pages
    - Specific pages to ignore
- Icon
  - Appearance depends on page language and activation state

——————————

The background script receives the browserAction event, as `useExtension`. It immediately calls `chrome.tabs.query()` to get the `id` of the active tab. By the time the `checkPageStatus` callback is called, it does not need to ask the tab itself if it is showing the extension Toolbar: it can decide for itself:
- if map[id] === true then do nothing (it's already active)
- if map[id] === false it was open: injectToolbar()
- if map[id] === undefined then injectCSS(), injectToolbar()

When a page is loaded, the content.js script is triggered. This can call getExtensionStatus() in background.js. This will look up map{}:
- if map[id] === true then injectCSS(), injectToolbar()
- if map[id] !== true, then set it to undefined, so that a browserAction click will injectCSS.

When using `chrome.runtime.sendMessage`, the `url` is sent both as a property of the `sender` object and of the `sender.tab` object. It can thus be passed through a filter to determine if the Toolbar should automatically be shown.
{ id: "uniquestringofsomeconsiderablelength"
, frameId: <integer>
, url: <string>
, tab: {
    active: <boolean>
  , audible: <boolean>
  , favIconUrl: <string>
  , height: <integer>
  , highlighted: <boolean>
  , id: <integer>
  , incognito: <boolean>
  , index: <integer>
  , mutedInfo: { ... }
  , pinned: <boolean>
  , selected: <boolean>
  , status: <"loading" | ... >
  , title: <string>
  , url: <same as ../url?>
  , width: <integer>
  , windowId: <integer>
  }
}

——————————

DATABASE
Calculate a complexity score for each visited page, based on the number of uncommon words. 
Calculate a jargon score, based on the number of words associated with certain topics

Save text of page shattered into its component morphemes
Search for sentences with a given set of words (key word with one word either side, in any position before or after)
Use a Bescherel or equivalent to link all inflections to their lemmas
(Inflections available through Wiktionary)

——————————

translate.google.com will not allow itself to be embedded in an iFrame. In order to disply Google Translate in the NoteBook window, it must be at the top level, displacing all other content. We can inject a toolbar at the top which will allow switching between GT, Wiktionary and Lexogram. We can inject CSS which applies to the GT content, and inject Wiktionary and Lexogram as iFrames on the same page.

The connection with Meteor needs to be done through a Meteor page, which must be constantly present. It can be invisible in an iFrame in the Toolbar, but this means that it gets reloaded each time a switch to GTr is made.

The CSS for GTr can make it:
* Collapse completely
* Show just the translation
* Fill the page

The CSS for the injected iFrames can do the same

But each time a new phrase is loaded, the page will reload, with all its iFrames. Solution:
* open GTr in its own tab
* update that tab
* grab the contents of the #result_box span
* show this translation in the NoteBook window
* provide a button to bring the GTr tab to the front